{"version":3,"sources":["components/header.js","actions/index.js","components/runtimeControl.js","core/storage.js","core/register.js","core/cell.js","core/error.js","core/order.js","core/interpreter.js","components/storageElement.js","components/memoryControl.js","components/stateRegister.js","components/registersControl.js","components/editor.js","components/workArea.js","App.js","serviceWorker.js","reducers/index.js","reducers/memory.js","reducers/registers.js","reducers/script.js","reducers/stateRegister.js","store.js","index.js"],"names":["Header","className","src","registersUpdated","registers","type","memoryUpdated","memory","stateRegisterUpdated","stateRegister","RuntimeControl","props","onClick","execute","Storage","adress","value","size","this","toString","Register","result","forEach","element","Cell","cells","Error","msg","line","Order","command","tag","args","Interpreter","errorHandler","ordersList","i","tmp","push","script","clearConfiguration","split","map","el","trim","index","order","filter","length","ex","a","slice","val","Number","isNaN","obj","dest","getTagPosition","transferData","mathOperation","from","to","b","from_cell","to_cell","findCellsByAdress","findRegisterByAdress","Math","pow","source","b_value","a_value","tmpReg","sign","executeLine","StorageElement","useState","toggled","setToggled","storageType","storage","getDec","getBin","getHex","mapDispatchToProps","MemoryControl","connect","state","console","log","key","StateRegister","symbol","RegistersControl","EditorPrimitive","editor","React","createRef","handleChange","bind","html","event","extractContent","target","scriptUpdated","innerHTML","setState","s","String","join","span","document","createElement","textContent","innerText","lines","height","current","offsetHeight","innerRef","disabled","onChange","Component","Editor","WorkAreaPrimitive","executeControl","interpreter","loadScript","memoryClear","WorkArea","App","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducers","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff6842cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return <header>\r\n    <div className='container p-3 d-flex align-items-end justify-content-between'>\r\n        <div className='d-flex align-items-end'>\r\n            <h1 className='text-white m-2 h4'>Psuedo Assembler</h1>\r\n            <h6 className='text-white font-weight-light'>by Maciej Łukasik</h6>\r\n        </div>\r\n        <div className='d-flex align-items-center'>\r\n            <img className='header-icon spin' src='https://cdn.worldvectorlogo.com/logos/react.svg'/>\r\n            <h6 className='text-white font-weight-light mx-2 my-0'>React</h6>\r\n            <img className='header-icon spin' src='https://raw.githubusercontent.com/reduxjs/redux/master/logo/logo.png'/>\r\n            <h6 className='text-white font-weight-light mx-2 my-0'>Redux</h6>\r\n        </div>\r\n    </div>\r\n  </header>;\r\n}\r\n\r\nexport default Header;","export const registersUpdated = (registers) => ({\r\n    type: 'UPDATE_REGISTERS',\r\n    registers\r\n  });\r\n\r\nexport const memoryUpdated = (memory) => ({\r\n    type: 'UPDATE_MEMORY',\r\n    memory\r\n});\r\n\r\nexport const memoryClear = (memory) => ({\r\n  type: 'CLEAR_MEMORY',\r\n  memory\r\n});\r\n\r\nexport const scriptUpdated = (script) => ({\r\n  type: 'UPDATE_SCRIPT',\r\n  script\r\n});\r\n\r\nexport const stateRegisterUpdated = (stateRegister) => ({\r\n  type: 'UPDATE_STATE',\r\n  stateRegister\r\n});","import React from 'react';\r\n\r\nfunction RuntimeControl(props) {\r\n    return <div>\r\n        <div className=\"my-2 mx-auto d-flex\">\r\n            <button onClick={()=>{props.execute('START')}} className='btn btn-sm btn-outline-success m-1'><i className=\"fas fa-play\"></i> Uruchom</button>\r\n            <button onClick={()=>{props.execute('RESET')}} className='btn btn-sm btn-outline-danger m-1'>Reset</button>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default RuntimeControl;","export default class Storage {\r\n\r\n    constructor(adress,value,size) {\r\n        this.adress=adress;\r\n        this.value=value;\r\n        this.size=size;\r\n    }\r\n\r\n    getDec() {\r\n        return this.value.toString(10);\r\n    }\r\n\r\n    getBin() {\r\n        return this.value.toString(2);\r\n    }\r\n\r\n    getHex() {\r\n        return this.value.toString(16);\r\n    }\r\n}","import Storage from './storage';\r\n\r\nexport default class Register extends Storage {\r\n\r\n    constructor(adress,value,size) {\r\n        super(adress,value,size);\r\n    }\r\n\r\n    static registers=[];\r\n\r\n    static findRegisterByAdress(adress) {\r\n\r\n        let result=null;\r\n\r\n        Register.registers.forEach(element => {\r\n            if(element.adress==adress)\r\n                result=element;\r\n        });\r\n\r\n        return result;\r\n    }\r\n}","import Storage from './storage';\r\n\r\nexport default class Cell extends Storage {\r\n\r\n    constructor(adress,value,size) {\r\n        super(adress,value,size);\r\n    }\r\n\r\n    static cells=[];\r\n\r\n    static findCellsByAdress(adress) {\r\n\r\n        let result=null;\r\n\r\n        Cell.cells.forEach(element => {\r\n            if(element.adress==adress)\r\n                result=element;\r\n        });\r\n\r\n        return result;\r\n    }\r\n}","export default class Error {\r\n    constructor(type,msg,line) {\r\n        this.type=type;\r\n        this.msg=msg;\r\n        this.line=line;\r\n    }\r\n}","export default class Order {\r\n    constructor(command,tag,...args) {\r\n        this.command=command;\r\n        this.args=args;\r\n        this.tag=tag;\r\n    }\r\n}","import Register from './register';\r\nimport Cell from './cell';\r\nimport Error from './error';\r\nimport Order from './order';\r\n\r\nexport default class Interpreter {\r\n\r\n    constructor(errorHandler) {\r\n        this.errorHandler=errorHandler;\r\n        this.stateRegister=new Register('STATE',0,2);\r\n    } \r\n\r\n    ordersList=[];\r\n\r\n    clearConfiguration() {\r\n        this.ordersList=[];\r\n        Register.registers=[];\r\n        for(let i=0;i<16;i++) {\r\n            let tmp=new Register(i,0,32);\r\n            Register.registers.push(tmp);\r\n        }\r\n        Cell.cells=[];\r\n    }\r\n\r\n    loadScript(script) {\r\n        this.clearConfiguration();\r\n        try {\r\n            script.split('\\n').map(el=>el.trim()).forEach((element,index) => {\r\n\r\n                if(element!='')\r\n                {\r\n                    let line=element.split(' ').map(el=>el.trim()).filter(el=>el!='');\r\n                    \r\n                    let order;\r\n\r\n                    if(line.length==3) {\r\n                        order=new Order(line[1],line[0],...line[2].split(',').map(el=>el.trim()).filter(el=>el!=''));\r\n                    }\r\n                    else if(line.length==2) {\r\n                        order=new Order(line[0],'',...line[1].split(',').map(el=>el.trim()).filter(el=>el!=''));\r\n                    }\r\n                    else if(line.length==1) {\r\n                        order=new Order('',line[0]);\r\n                    }\r\n                    else {\r\n                        this.errorHandler(new Error('Błąd składni','Polecenie zawiera zbyt dużo znaków spacji.',index));\r\n                        return;\r\n                    }\r\n\r\n                    this.ordersList.push(order);\r\n                }\r\n            });\r\n        } catch(ex) {\r\n            this.errorHandler(new Error('Błąd składni','Wystąpił nieznany błąd.',0));\r\n            return;\r\n        }\r\n    }\r\n\r\n    executeLine(order,line) {\r\n        switch(order.command) {\r\n\r\n            //Operacje rezerwacji\r\n            case 'DC':\r\n                    {\r\n                    let a=order.args[0].trim().slice(0,-1).split('(').map(el=>el.trim());\r\n                    if(a.length==2)\r\n                    {\r\n                        let val=a[1];\r\n                        val=Number(val);\r\n    \r\n                        if(isNaN(val))\r\n                        {\r\n                            this.errorHandler(new Error('Błąd wykonawczy','Wartość musi być liczbą.',line));\r\n                            return; \r\n                        }\r\n                        else {\r\n                            let obj=new Cell(order.tag,val,32);\r\n                            Cell.cells.push(obj);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.errorHandler(new Error('Błąd wykonawczy','Niepoprawna składnia polecania DC.',line));\r\n                        return; \r\n                    }\r\n                }\r\n                break;\r\n            case 'DS':\r\n                {\r\n                let a=order.args[0].trim();\r\n                \r\n                let obj=new Cell(order.tag,0,32);\r\n                Cell.cells.push(obj);\r\n                }\r\n                break;\r\n\r\n            //Operacje skoku\r\n            case 'J':\r\n                { \r\n                    let dest=this.getTagPosition(order.args[0]);\r\n                    if(dest!=-1) return dest;\r\n                }\r\n                break;\r\n            case 'JP':\r\n                {\r\n                    let dest=this.getTagPosition(order.args[0]);\r\n                    if(this.stateRegister.value==1&&dest!=-1) return dest;\r\n                }\r\n                break;\r\n            case 'JN':\r\n                {\r\n                    let dest=this.getTagPosition(order.args[0]);\r\n                    if(this.stateRegister.value==2&&dest!=-1) return dest;\r\n                }\r\n                break;\r\n            case 'JZ':\r\n                {\r\n                    let dest=this.getTagPosition(order.args[0]);\r\n                    if(this.stateRegister.value==0&&dest!=-1) return dest;\r\n                }\r\n                break;\r\n\r\n            //Operacje przeniesienia danych\r\n            case 'L':\r\n                    this.transferData('C:'+order.args[1],'R:'+order.args[0],line);\r\n                break;\r\n            case 'LR':\r\n                    this.transferData('R:'+order.args[1],'R:'+order.args[0],line);\r\n                break;\r\n            case 'ST':\r\n                    this.transferData('R:'+order.args[0],'C:'+order.args[1],line);\r\n                break;\r\n\r\n            //Operacje artmetyczne\r\n            case 'A':\r\n                    this.mathOperation('A','C',line,...order.args);\r\n                break;\r\n            case 'AR':\r\n                    this.mathOperation('A','R',line,...order.args);\r\n                break;\r\n            case 'S':\r\n                    this.mathOperation('S','C',line,...order.args);\r\n                break;\r\n            case 'SR':\r\n                    this.mathOperation('S','R',line,...order.args);\r\n                break;\r\n            case 'M':\r\n                    this.mathOperation('M','C',line,...order.args);\r\n                break;\r\n            case 'MR':\r\n                    this.mathOperation('M','R',line,...order.args);\r\n                break;\r\n            case 'D':\r\n                    this.mathOperation('D','C',line,...order.args);\r\n                break;\r\n            case 'DR':\r\n                    this.mathOperation('D','R',line,...order.args);\r\n                break;\r\n            case 'C':\r\n                    this.mathOperation('C','C',line,...order.args);\r\n                break;\r\n            case 'CR':\r\n                    this.mathOperation('C','R',line,...order.args);\r\n                break;\r\n            \r\n        }\r\n\r\n        return line;\r\n    }\r\n\r\n    getTagPosition(tag) {\r\n        let result=-1;\r\n\r\n        this.ordersList.forEach((el,index)=>{\r\n            if(el.tag.trim()==tag.trim())\r\n                result=index;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    transferData(from,to,line) {\r\n        from=from.split(':');\r\n        to=to.split(':');\r\n        let from_cell=(from[0]=='C');\r\n        let to_cell=(to[0]=='C');\r\n\r\n        let a;\r\n        let b;\r\n        \r\n        if(from_cell)\r\n            a=Cell.findCellsByAdress(from[1]);\r\n        else\r\n            a=Register.findRegisterByAdress(from[1]);\r\n\r\n        if(to_cell)\r\n            b=Cell.findCellsByAdress(to[1]);\r\n        else\r\n            b=Register.findRegisterByAdress(to[1]);\r\n\r\n        if(b==null||a==null) {\r\n            this.errorHandler(new Error('Błąd wykonawczy','Nie można odnaleść rejestru lub pamięci.',line));\r\n            return;\r\n        }\r\n        else {\r\n            b.value=a.value;\r\n\r\n            if(b.value>=Math.pow(2,b.size-1)) {\r\n                this.stateRegister.value=3;\r\n                b.value=Math.pow(2,b.size-1)-1;\r\n            }\r\n            if(b.value<=-Math.pow(2,b.size-1)) {\r\n                this.stateRegister.value=3;\r\n                b.value=-Math.pow(2,b.size-1)+1;\r\n            }\r\n        }\r\n      \r\n    }\r\n\r\n    mathOperation(type,source,line,...args) {\r\n        let a=args[0];\r\n        let b=args[1];\r\n        if(!isNaN(a))\r\n        {\r\n            let a_value=Register.findRegisterByAdress(a);\r\n            let b_value;\r\n            if(source=='C')\r\n            {\r\n                b_value=Cell.findCellsByAdress(b);\r\n            }\r\n            else {\r\n                b_value=Register.findRegisterByAdress(b);\r\n            }\r\n\r\n            if(a_value==null||b_value==null) {\r\n                this.errorHandler(new Error('Błąd wykonawczy','Nie można odnaleść rejestru lub pamięci.',line));\r\n                return;\r\n            }\r\n            else {\r\n                let tmpReg=a_value.value;\r\n                switch(type)\r\n                {\r\n                    case 'A':\r\n                        a_value.value=Number(a_value.value)+Number(b_value.value);\r\n                        break;\r\n                    case 'S':\r\n                        a_value.value=Number(a_value.value)-Number(b_value.value);\r\n                        break;\r\n                    case 'M':\r\n                        a_value.value=Number(a_value.value)*Number(b_value.value);\r\n                        break;\r\n                    case 'D':\r\n                        a_value.value=Number(a_value.value)/Number(b_value.value);\r\n                        break;\r\n                    case 'C':\r\n                        a_value.value=Number(a_value.value)-Number(b_value.value);\r\n                        break;\r\n                }\r\n                switch(Math.sign(a_value.value)) {\r\n                    case -1: this.stateRegister.value=2;\r\n                        break;\r\n                    case 1: this.stateRegister.value=1;\r\n                        break;\r\n                    case 0: this.stateRegister.value=0;\r\n                        break;\r\n                }\r\n                if(type=='C') {\r\n                    a_value.value=tmpReg;\r\n                }\r\n                if(a_value.value>=Math.pow(2,a_value.size-1)) {\r\n                    this.stateRegister.value=3;\r\n                    a_value.value=Math.pow(2,a_value.size-1)-1;\r\n                }\r\n                if(a_value.value<=-Math.pow(2,a_value.size-1)) {\r\n                    this.stateRegister.value=3;\r\n                    a_value.value=-Math.pow(2,a_value.size-1)+1;\r\n                }\r\n               \r\n            }\r\n        }\r\n        else {\r\n            this.errorHandler(new Error('Błąd wykonawczy','Niepoprawny adres rejestru.',line));\r\n                return; \r\n        }\r\n    } \r\n\r\n    execute() {\r\n        this.stateRegister=new Register('STATE',0,2);\r\n\r\n        for(let i=0;i<this.ordersList.length;i++) {\r\n            // try {\r\n                i=this.executeLine(this.ordersList[i],i);\r\n            // } catch(ex) {\r\n            //     this.errorHandler(new Error('Błąd wykonawczy','Podczas wykonywania polecenia wystąpił błąd',i));\r\n            // return;\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","import React,{useState} from 'react';\r\n\r\nfunction StorageElement(props) {\r\n    const [toggled, setToggled] = useState('collapse-toggled');\r\n\r\n    return <div>\r\n        <div className=\"collapse-label p-1 m-1 px-3\" onClick={() => (toggled=='collapse-toggled')?setToggled(''):setToggled('collapse-toggled')}>{props.storageType} {props.storage.adress} <span className='text-muted'>{props.storage.getDec()}</span></div>\r\n        <div className={toggled}>\r\n            <h6 className='pl-4'>Dec: {props.storage.getDec()}</h6>\r\n            <h6 className='pl-4'>Bin: {props.storage.getBin()}</h6>\r\n            <h6 className='pl-4'>Hex: {props.storage.getHex()}</h6>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default StorageElement;","import React,{useState} from 'react';\r\nimport StorageElement from './storageElement';\r\nimport { connect } from \"react-redux\";\r\nimport { memoryUpdated,registersUpdated } from \"../actions\";\r\n\r\nfunction MemoryControlPrimitive(props) {\r\n    console.log(props.memory);\r\n\r\n    let cells=props.memory.map(el=><StorageElement key={el.adress} storageType='Komórka' storage={el}/>);\r\n\r\n    if(cells.length==0)\r\n        cells=<p className='text-muted'>Brak komórek do wyświetlenia</p>;\r\n\r\n    const [toggled, setToggled] = useState('collapse-toggled');\r\n\r\n    return <div className='my-2'>\r\n        <h6 onClick={() => (toggled=='collapse-toggled')?setToggled(''):setToggled('collapse-toggled')} className='toggle-main-label'>Podgląd pamięci</h6>\r\n        <div className={toggled}>\r\n        <hr/>\r\n        <div className='py-2'>\r\n        {cells}\r\n        </div>\r\n        <hr/>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      memory: state.memory,\r\n      registers:state.registers\r\n    }\r\n  };\r\n\r\nconst mapDispatchToProps = { memoryUpdated,registersUpdated };\r\n  \r\nexport const MemoryControl = connect(mapStateToProps, mapDispatchToProps)(MemoryControlPrimitive);","import React,{useState} from 'react';\r\nimport StorageElement from './storageElement';\r\nimport { connect } from \"react-redux\";\r\nimport { stateRegisterUpdated } from \"../actions\";\r\nimport { identifier } from '@babel/types';\r\n\r\nfunction StateRegisterPrimitive(props) {\r\n\r\n    console.log(props);\r\n\r\n    let symbol='Z';\r\n    if(props.stateRegister.value==1) {\r\n        symbol='P';\r\n    } else if(props.stateRegister.value==2) {\r\n        symbol='N';\r\n    }\r\n\r\n    return <div className='my-2'>\r\n        <h6>Rejestr stanu</h6>\r\n        <h6 className='font-weight-bold text-muted'>{props.stateRegister.getBin()} {symbol}</h6>\r\n    </div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      stateRegister:state.stateRegister\r\n    }\r\n  };\r\n\r\nconst mapDispatchToProps = { stateRegisterUpdated};\r\n  \r\nexport const StateRegister = connect(mapStateToProps, mapDispatchToProps)(StateRegisterPrimitive);","import React,{useState} from 'react';\r\nimport StorageElement from './storageElement';\r\nimport { connect } from \"react-redux\";\r\nimport { memoryUpdated,registersUpdated } from \"../actions\";\r\n\r\nfunction RegistersControlPrimitive(props) {\r\n\r\n    let registers=props.registers.map(el=><StorageElement key={el.adress} storageType='Rejestr' storage={el}/>);\r\n\r\n    const [toggled, setToggled] = useState('collapse-toggled');\r\n\r\n    return <div>\r\n        <h6 onClick={() => (toggled=='collapse-toggled')?setToggled(''):setToggled('collapse-toggled')} className='toggle-main-label'>Podgląd rejestrów</h6>\r\n        <div className={toggled}>\r\n        <hr/>\r\n        {registers}\r\n        <hr/>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      memory: state.memory,\r\n      registers:state.registers\r\n    }\r\n  };\r\n\r\nconst mapDispatchToProps = { memoryUpdated,registersUpdated };\r\n  \r\nexport const RegistersControl = connect(mapStateToProps, mapDispatchToProps)(RegistersControlPrimitive);","import React,{Component} from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { memoryUpdated,registersUpdated,scriptUpdated } from \"../actions\";\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nclass EditorPrimitive extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.editor = React.createRef()\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {html: \"Wpisz swój kod...\"};\r\n      }\r\n\r\n    handleChange(event) {\r\n        console.log(this.extractContent(event.target.value));\r\n        this.props.scriptUpdated(this.extractContent(event.target.innerHTML));\r\n        this.setState({html: event.target.value});\r\n    }\r\n\r\n    extractContent(s) {\r\n        s=String(s).split('<div>').join('\\n<div>');\r\n        var span = document.createElement('span');\r\n        span.innerHTML = s;\r\n        return span.textContent || span.innerText;\r\n      };\r\n          \r\n\r\n    render() {\r\n        let lines=[];\r\n\r\n        let height=(this.editor.current)?this.editor.current.offsetHeight:600;\r\n\r\n        for(let i=1;i<(height*(25/600));i++) {\r\n            lines.push(<span key={i}>{i}<br/></span>);\r\n        }\r\n\r\n        return <div className='p-2'>\r\n            <div className='main-editor'>\r\n                <div className='row-counter'>{lines}</div>\r\n                <ContentEditable innerRef={this.editor} html={this.state.html} disabled={false} onChange={this.handleChange} className='editor-textfield'/>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      memory: state.memory,\r\n      registers:state.registers,\r\n      script:state.script\r\n    }\r\n  };\r\n\r\nconst mapDispatchToProps = { memoryUpdated,registersUpdated,scriptUpdated };\r\n  \r\nexport const Editor = connect(mapStateToProps, mapDispatchToProps)(EditorPrimitive);","import React,{Component} from 'react';\r\nimport RuntimeControl from './runtimeControl';\r\nimport Register from '../core/register';\r\nimport Interpreter from '../core/interpreter';\r\nimport Cell from '../core/cell';\r\nimport { connect } from \"react-redux\";\r\nimport {MemoryControl} from './memoryControl';\r\nimport {StateRegister} from './stateRegister';\r\nimport {RegistersControl} from './registersControl';\r\nimport { memoryUpdated,registersUpdated,stateRegisterUpdated,memoryClear } from \"../actions\";\r\nimport {Editor} from './editor';\r\n\r\nclass WorkAreaPrimitive extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.executeControl=this.executeControl.bind(this);\r\n        this.interpreter=new Interpreter(el=>console.log(el));\r\n        this.interpreter.clearConfiguration();\r\n        this.props.registersUpdated(Register.registers);\r\n        this.props.memoryUpdated(Cell.cells);\r\n        this.props.stateRegisterUpdated(this.interpreter.stateRegister);\r\n    }\r\n\r\n    executeControl(order) {\r\n        switch(order) {\r\n            case 'START':\r\n                this.interpreter.clearConfiguration();\r\n                this.interpreter.loadScript(this.props.script);\r\n                this.interpreter.execute();\r\n                this.props.registersUpdated(Register.registers);\r\n                this.props.memoryUpdated(Cell.cells);\r\n                this.props.stateRegisterUpdated(this.interpreter.stateRegister);\r\n                break;\r\n            case 'NEXT':\r\n                break;\r\n            case 'RESET': this.interpreter.clearConfiguration();\r\n                        this.props.registersUpdated(Register.registers);\r\n                        this.props.memoryUpdated(Cell.cells);\r\n                        this.props.stateRegisterUpdated(this.interpreter.stateRegister);\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <main>\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className=\"col-12 col-md-5 col-lg-4 p-2\">\r\n                        <div className='workspace'>\r\n                            <RuntimeControl execute={this.executeControl}/>\r\n                            <MemoryControl/>\r\n                            <StateRegister/>\r\n                            <RegistersControl/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-7 col-lg-8 p-2\">\r\n                        <div className='workspace'>\r\n                            <Editor/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      memory: state.memory,\r\n      registers:state.registers,\r\n      stateRegister:state.stateRegister,\r\n      script:state.script\r\n    }\r\n  };\r\n\r\nconst mapDispatchToProps = { memoryUpdated,registersUpdated,stateRegisterUpdated,memoryClear };\r\n  \r\nexport const WorkArea = connect(mapStateToProps, mapDispatchToProps)(WorkAreaPrimitive);","import React from 'react';\nimport Header from './components/header';\nimport { connect } from \"react-redux\";\nimport { memoryUpdated,registersUpdated } from \"./actions\";\nimport {WorkArea} from './components/workArea';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <WorkArea/>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport { memory } from \"./memory\";\r\nimport { registers } from \"./registers\";\r\nimport {stateRegister} from './stateRegister';\r\nimport {script} from './script';\r\n\r\nexport default combineReducers({\r\n  memory,registers,script,stateRegister\r\n});","export const memory = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'UPDATE_MEMORY':\r\n          return action.memory;\r\n      case 'CLEAR_MEMORY':\r\n          return [];\r\n      default:\r\n        return state\r\n    }\r\n  }","export const registers = (state=[], action) => {\r\n    switch (action.type) {\r\n      case 'UPDATE_REGISTERS':\r\n          return action.registers;\r\n      default:\r\n        return state;\r\n    }\r\n  }","export const script = (state='', action) => {\r\n    switch (action.type) {\r\n      case 'UPDATE_SCRIPT':\r\n        return action.script;\r\n      default:\r\n        return state\r\n    }\r\n  }","export const stateRegister = (state={}, action) => {\r\n    switch (action.type) {\r\n      case 'UPDATE_STATE':\r\n        return action.stateRegister;\r\n      default:\r\n        return state\r\n    }\r\n  } ","import { createStore } from 'redux';\r\nimport reducers from './reducers';\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport { memoryUpdated,registersUpdated } from \"./actions\";\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}